generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  
}

 model Users {
  userId    Int  @id @default(autoincrement()) @map("userId")
  name      String   @map("name")
  email     String   @unique  @map("email")
  password  String   @map("password")
  role      Role     @default(APPLICANT) @map("role")
  emailVerified          Boolean @default(false) @map("emailVerified")
  emailVerificationToken String? @map("emailVerificationToken")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt  @map("updatedAt")

  Resumes Resumes[]
  RefreshToken RefreshToken?
  Posts Posts[]

  @@map("Users")
 }

 enum Role {
     APPLICANT
     RECRUITER
 }

 model Posts {
  postId  Int  @id @default(autoincrement()) @map("postId")
  UserId  Int  @map("UserId")
  title  String @map("title")
  content String @map("content") @db.Text

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt  @map("updatedAt")
 
 Comments Comments[]
 User Users @relation(fields: [UserId], references:[userId],onDelete:Cascade)
@@map("Posts")
 }

model Resumes{
 resumeId        Int     @id @default(autoincrement()) @map("resumeId")
 UserId          Int     @map("UserId")
 title           String  @map("title")
 introduction    String  @map("introduction")  @db.Text
 status          Status  @default(APPLY) @map("status")

createdAt DateTime @default(now()) @map("createdAt")
updatedAt DateTime @updatedAt  @map("updatedAt")

User Users @relation(fields:[UserId], references: [userId], onDelete:Cascade)

  @@map("Resumes")
}

enum Status{

APPLY
DROP
PASS
INTERVIEW1
INTERVIEW2
FINAL_PASS

}

model Comments {
  commentId       Int     @id @default(autoincrement()) @map("commentId")
  UserId          Int     @map("UserId")
  PostId         Int     @map("PostId")
  content         String    @map("content")

createdAt DateTime @default(now()) @map("createdAt")
updatedAt DateTime @updatedAt  @map("updatedAt")

post Posts @relation(fields:[PostId], references:[postId], onDelete:Cascade)
@@map("Comments")
}

model RefreshToken {
  Id       Int     @id @default(autoincrement()) @map("Id")
 UserId    Int  @unique   @map("UserId")
 refresh_token    String?  @map("refresh_token")
 
createdAt DateTime @default(now()) @map("createdAt")
updatedAt DateTime @updatedAt  @map("updatedAt")
  

  User Users @relation(fields:[UserId], references: [userId], onDelete:Cascade)
  @@map("RefreshToken")
  }