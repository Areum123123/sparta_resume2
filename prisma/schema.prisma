generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  
}

 model Users {
  userId    Int  @id @default(autoincrement()) @map("userId")
  name      String   @map("name")
  email     String   @unique  @map("email")
  password  String   @map("password")
  role      Role     @default(APPLICANT) @map("role")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt  @map("updatedAt")

  Resumes Resumes[]
  RefreshToken RefreshToken?

  @@map("Users")
 }

 enum Role {
     APPLICANT
     RECRUITER
 }

model Resumes{
 resumeId        Int     @id @default(autoincrement()) @map("resumeId")
 UserId          Int     @map("UserId")
 title           String  @map("title")
 introduction    String  @map("introduction")  @db.Text
 status          Status  @default(APPLY) @map("status")

createdAt DateTime @default(now()) @map("createdAt")
updatedAt DateTime @updatedAt  @map("updatedAt")

User Users @relation(fields:[UserId], references: [userId], onDelete:Cascade)

  @@map("Resumes")
}

enum Status{

APPLY
DROP
PASS
INTERVIEW1
INTERVIEW2
FINAL_PASS

}

model RefreshToken {
  Id       Int     @id @default(autoincrement()) @map("Id")
 UserId    Int  @unique   @map("UserId")
 refresh_token    String?  @map("refresh_token")
 
createdAt DateTime @default(now()) @map("createdAt")
updatedAt DateTime @updatedAt  @map("updatedAt")
  

  User Users @relation(fields:[UserId], references: [userId], onDelete:Cascade)
  @@map("RefreshToken")
  }